import { Injectable, Logger } from '@nestjs/common';
import { promises as fs } from 'fs';
import { join } from 'path';
import { AreaExecutionsService } from '../area-executions/area-executions.service';
import { AreaParametersService } from '../area-parameters/area-parameters.service';

interface EmailParams {
  to: string;
  subject: string;
  body: string;
}

@Injectable()
export class FakeEmailService {
  private readonly logger = new Logger(FakeEmailService.name);

  constructor(
    private readonly areaExecutionsService: AreaExecutionsService,
    private readonly areaParametersService: AreaParametersService,
  ) {}

  async sendEmail(executionId: number, areaId: number): Promise<void> {
    try {
      this.logger.log(
        `Processing email send for execution ${executionId}, area ${areaId}`,
      );

      // Get email parameters from the area
      const emailParams = await this.getEmailParameters(areaId);

      if (!emailParams) {
        throw new Error('Email parameters not configured');
      }

      // Simulate email sending (you can replace with real email service later)
      await this.simulateEmailSend(emailParams);

      // Update execution as successful
      await this.areaExecutionsService.completeExecution(executionId, {
        executionResult: {
          message: `Email sent successfully to ${emailParams.to}`,
          email_recipient: emailParams.to,
          email_subject: emailParams.subject,
        },
      });

      this.logger.log(
        `Email sent successfully to ${emailParams.to} for execution ${executionId}`,
      );
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      const errorStack = error instanceof Error ? error.stack : undefined;

      this.logger.error(
        `Failed to send email for execution ${executionId}: ${errorMessage}`,
        errorStack,
      );

      // Update execution as failed
      await this.areaExecutionsService.failExecution(executionId, errorMessage);
    }
  }

  private async getEmailParameters(
    areaId: number,
  ): Promise<EmailParams | null> {
    try {
      // Get all parameters for this area
      const parameters = await this.areaParametersService.findByArea(areaId);

      const toParam = parameters.find((p) => p.variable?.name === 'to');
      const subjectParam = parameters.find(
        (p) => p.variable?.name === 'subject',
      );
      const bodyParam = parameters.find((p) => p.variable?.name === 'body');

      if (!toParam?.value) {
        throw new Error('Email recipient (to) not configured');
      }

      return {
        to: toParam.value,
        subject: subjectParam?.value || 'AREA Notification',
        body: bodyParam?.value || 'Your AREA was triggered successfully.',
      };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);

      this.logger.error(
        `Failed to get email parameters for area ${areaId}: ${errorMessage}`,
      );
      return null;
    }
  }

  private async simulateEmailSend(params: EmailParams): Promise<void> {
    // Create email content
    const emailContent = `
ðŸ“§ EMAIL NOTIFICATION
====================
Date: ${new Date().toISOString()}
To: ${params.to}
Subject: ${params.subject}

${params.body}

---
Generated by AREA Email Service
====================

`;

    // Write to mail.txt file
    try {
      const filePath = join(process.cwd(), 'mail.txt');

      await fs.appendFile(filePath, emailContent);

      this.logger.log(
        `ðŸ“§ Email written to mail.txt: To ${params.to}, Subject: "${params.subject}"`,
      );
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);

      this.logger.error(`Failed to write email to file: ${errorMessage}`);
      throw error;
    }
  }

  async processReaction(executionId: number, areaId: number): Promise<void> {
    await this.sendEmail(executionId, areaId);
  }
}
